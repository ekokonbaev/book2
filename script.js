// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AOS
AOS.init({
    duration: 800,
    once: true
});

// –î–∞–Ω–Ω—ã–µ –æ –∫–Ω–∏–≥–∞—Ö
const books = [
    {
        title: '–°–∞–º—É—Ä–∞–π –±–µ–∑ –º–µ—á–∞',
        author: '–ö–∏—Ç–∞–º–∏ –ú–∞—Å–∞–æ',
        image: 'img/–°–∞–º—É—Ä–∞–π.jpg',
        pdf: 'pdf/samuray_bez_mecha-pdf.pdf',
        audio: 'audio/00_01.mp3'
    },
    {
        title: '–ê–ª–∏—à–µ—Ä –ù–∞–≤–æ–∏',
        author: '–ê–ª–∏—à–µ—Ä –ù–∞–≤–æ–∏',
        image: 'img/–ê–ª–∏—à–µ—Ä.jpg',
        pdf: '#'
    },
    {
        title: '–ß—ã–Ω–≥—ã–∑ –ê–π—Ç–º–∞—Ç–æ–≤',
        author: '–ß—ã–Ω–≥—ã–∑–∞ –ê–π—Ç–º–∞—Ç–æ–≤',
        image: 'img/–ß—ã–Ω–≥—ã–∑.jpg',
        pdf: '#'
    },
    {
        title: '–õ–µ–≤ –¢–æ–ª—Å—Ç–æ–π',
        author: '–õ–µ–≤ –¢–æ–ª—Å—Ç–æ–π',
        image: 'img/–ª–µ–≤ —Ç–æ–ª—Å—Ç–æ–π.jpg',
        pdf: '#'
    }
];

// –ö–ª–∞—Å—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞—É–¥–∏–æ–ø–ª–µ–µ—Ä–æ–º
class AudioPlayer {
    constructor() {
        this.audio = new Audio();
        this.playlist = [];
        this.currentTrackIndex = 0;

        this.playerElement = document.getElementById('globalAudioPlayer');
        this.playPauseBtn = document.getElementById('playPause');
        this.prevBtn = document.getElementById('prevTrack');
        this.nextBtn = document.getElementById('nextTrack');
        this.progressBar = this.playerElement?.querySelector('.progress');
        this.progressBarContainer = this.playerElement?.querySelector('.progress-bar');
        this.currentTimeSpan = document.getElementById('currentTime');
        this.durationSpan = document.getElementById('duration');
        this.trackTitle = document.getElementById('trackTitle');

        this.initializeEventListeners();
    }

    initializeEventListeners() {
        this.playPauseBtn?.addEventListener('click', () => this.togglePlay());
        this.prevBtn?.addEventListener('click', () => this.playPrevious());
        this.nextBtn?.addEventListener('click', () => this.playNext());

        this.audio.addEventListener('timeupdate', () => this.updateProgress());
        this.audio.addEventListener('ended', () => this.playNext());
        this.audio.addEventListener('loadedmetadata', () => {
            this.durationSpan.textContent = this.formatTime(this.audio.duration);
            this.trackTitle.textContent = this.getTrackName(this.playlist[this.currentTrackIndex]);
        });

        this.progressBarContainer?.addEventListener('click', (e) => {
            const rect = this.progressBarContainer.getBoundingClientRect();
            const pos = (e.clientX - rect.left) / rect.width;
            this.audio.currentTime = pos * this.audio.duration;
        });
    }

    showPlayer() {
        this.playerElement?.classList.add('visible');
    }

    hidePlayer() {
        this.playerElement?.classList.remove('visible');
    }

    togglePlay() {
        if (this.audio.paused) {
            this.audio.play();
            this.playPauseBtn.innerHTML = '<i class="fas fa-pause"></i>';
        } else {
            this.audio.pause();
            this.playPauseBtn.innerHTML = '<i class="fas fa-play"></i>';
        }
    }

    playTrack(index) {
        if (index >= 0 && index < this.playlist.length) {
            this.currentTrackIndex = index;
            this.audio.src = this.playlist[index];
            this.audio.play();
            this.playPauseBtn.innerHTML = '<i class="fas fa-pause"></i>';
        }
    }

    playNext() {
        // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Ç–µ–∫—É—â–µ–≥–æ —Ç—Ä–µ–∫–∞ (–æ–¥–∏–Ω —Ç—Ä–µ–∫ –≤ –ø–ª–µ–π–ª–∏—Å—Ç–µ)
        this.audio.currentTime = 0;
        this.audio.play();
    }

    playPrevious() {
        // –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ playNext()
        this.audio.currentTime = 0;
        this.audio.play();
    }

    updateProgress() {
        const progress = (this.audio.currentTime / this.audio.duration) * 100;
        this.progressBar.style.width = `${progress}%`;
        this.currentTimeSpan.textContent = this.formatTime(this.audio.currentTime);
    }

    formatTime(seconds) {
        const minutes = Math.floor(seconds / 60);
        seconds = Math.floor(seconds % 60);
        return `${minutes}:${seconds.toString().padStart(2, '0')}`;
    }

    getTrackName(url) {
        return url?.split('/').pop().replace(/\.[^/.]+$/, '') || '';
    }

    loadPlaylist(tracks) {
        this.playlist = tracks;
        if (tracks.length > 0) {
            this.playTrack(0);
            this.showPlayer();
        } else {
            this.hidePlayer();
        }
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–µ–µ—Ä–∞
const player = new AudioPlayer();

// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ –∫–Ω–∏–≥
function loadBooks() {
    const booksContainer = document.getElementById('booksContainer');
    if (!booksContainer) return;

    booksContainer.innerHTML = '';

    books.forEach(book => {
        const bookCard = document.createElement('div');
        bookCard.className = 'book-card';
        bookCard.setAttribute('data-aos', 'fade-up');

        const audioButton = book.audio ? `
            <a href="#" class="listen-btn" data-audio-path="${book.audio}">
                <i class="fas fa-headphones"></i> –°–ª—É—à–∞—Ç—å
            </a>
        ` : '';

        bookCard.innerHTML = `
            <img src="${book.image}" alt="${book.title}">
            <div class="book-info">
                <h3>${book.title}</h3>
                <p class="author">–ê–≤—Ç–æ—Ä: ${book.author}</p>
                <div class="book-actions">
                    <a href="${book.pdf}" target="_blank" class="read-btn">
                        <i class="fas fa-book-open"></i> –ß–∏—Ç–∞—Ç—å
                    </a>
                    ${audioButton}
                    <a href="${book.pdf}" download class="download-btn">
                        <i class="fas fa-download"></i> –°–∫–∞—á–∞—Ç—å
                    </a>
                </div>
            </div>
        `;

        booksContainer.appendChild(bookCard);
    });

    // –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ "–°–ª—É—à–∞—Ç—å"
    document.querySelectorAll('.listen-btn').forEach(button => {
        button.addEventListener('click', handleAudioButtonClick);
    });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–°–ª—É—à–∞—Ç—å"
function handleAudioButtonClick(event) {
    event.preventDefault();
    const audioPath = event.currentTarget.getAttribute('data-audio-path');
    if (audioPath) {
        player.loadPlaylist([audioPath]);
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', loadBooks);

// –£–ª—É—á—à–µ–Ω–Ω—ã–π —á–∞—Ç-–ø–æ–º–æ—â–Ω–∏–∫
document.addEventListener('DOMContentLoaded', function() {
    const chatAssistant = document.querySelector('.chat-assistant');
    const minimizeBtn = document.querySelector('.minimize-btn');
    const chatInput = document.querySelector('.chat-input input');
    const sendBtn = document.querySelector('.send-btn');
    const chatMessages = document.querySelector('.chat-messages');
    const quickReplies = document.querySelector('.quick-replies');

    // –ú–∏–Ω–∏–º–∏–∑–∞—Ü–∏—è —á–∞—Ç–∞
    minimizeBtn.addEventListener('click', () => {
        chatAssistant.classList.toggle('minimized');
        minimizeBtn.textContent = chatAssistant.classList.contains('minimized') ? '+' : '‚àí';
    });

    // –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
    function showTypingIndicator() {
        const indicator = document.createElement('div');
        indicator.className = 'typing-indicator';
        indicator.innerHTML = '<span></span><span></span><span></span>';
        chatMessages.appendChild(indicator);
        chatMessages.scrollTop = chatMessages.scrollHeight;
        return indicator;
    }

    // –°–∫—Ä—ã—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
    function hideTypingIndicator(indicator) {
        if (indicator) {
            indicator.remove();
        }
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
    function formatTime() {
        const now = new Date();
        return now.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    function sendMessage(message = null) {
        const messageText = message || chatInput.value.trim();
        if (messageText) {
            // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            addMessage(messageText, 'user');
            chatInput.value = '';

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
            const typingIndicator = showTypingIndicator();

            // –ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –ø–æ–º–æ—â–Ω–∏–∫–∞
            setTimeout(() => {
                hideTypingIndicator(typingIndicator);
                const response = getAssistantResponse(messageText);
                addMessage(response, 'assistant');
            }, 1000 + Math.random() * 1000); // –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
        }
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
    function addMessage(text, sender) {
        const messageDiv = document.createElement('div');
        messageDiv.className = `message ${sender}`;
        
        // –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        if (text.includes('—Å–ø–∞—Å–∏–±–æ')) {
            text += ' üòä';
        } else if (text.includes('–ø—Ä–∏–≤–µ—Ç') || text.includes('–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π')) {
            text += ' üëã';
        }
        
        messageDiv.innerHTML = `
            ${text}
            <div class="message-time">${formatTime()}</div>
        `;
        chatMessages.appendChild(messageDiv);
        chatMessages.scrollTop = chatMessages.scrollHeight;
    }

    // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –ø–æ–º–æ—â–Ω–∏–∫–∞
    function getAssistantResponse(message) {
        const lowerMessage = message.toLowerCase();
        
        if (lowerMessage.includes('–ø—Ä–∏–≤–µ—Ç') || lowerMessage.includes('–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π')) {
            return '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –ö–Ω–∏–≥–∞–ú–∞–Ω–∏—è. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?';
        }
        
        if (lowerMessage.includes('–∫–Ω–∏–≥–∏') || lowerMessage.includes('–±–∏–±–ª–∏–æ—Ç–µ–∫–∞') || lowerMessage.includes('–∫–∞–∫–∏–µ –∫–Ω–∏–≥–∏')) {
            return '–£ –Ω–∞—Å –µ—Å—Ç—å –∫–Ω–∏–≥–∏ —Ä–∞–∑–Ω—ã—Ö –∂–∞–Ω—Ä–æ–≤: —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞, –Ω–∞—É—á–Ω–æ-–ø–æ–ø—É–ª—è—Ä–Ω–∞—è, –∫–ª–∞—Å—Å–∏–∫–∞ –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è. –í —Ä–∞–∑–¥–µ–ª–µ "–ö–Ω–∏–≥–∏" –≤—ã –Ω–∞–π–¥–µ—Ç–µ –ø–æ–ª–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥.';
        }
        
        if (lowerMessage.includes('–∞—É–¥–∏–æ') || lowerMessage.includes('—Å–ª—É—à–∞—Ç—å') || lowerMessage.includes('–∫–∞–∫ —Å–ª—É—à–∞—Ç—å')) {
            return '–î–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –∞—É–¥–∏–æ–∫–Ω–∏–≥–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–°–ª—É—à–∞—Ç—å" –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–µ –∫–Ω–∏–≥–∏. –í—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ–º —Å –ø–æ–º–æ—â—å—é –ø–ª–µ–µ—Ä–∞ –≤–Ω–∏–∑—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã.';
        }
        
        if (lowerMessage.includes('—á–∏—Ç–∞—Ç—å') || lowerMessage.includes('—Ç–µ–∫—Å—Ç') || lowerMessage.includes('–∫–∞–∫ —á–∏—Ç–∞—Ç—å')) {
            return '–î–ª—è —á—Ç–µ–Ω–∏—è –∫–Ω–∏–≥–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ß–∏—Ç–∞—Ç—å" –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–µ –∫–Ω–∏–≥–∏. –ö–Ω–∏–≥–∞ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –≤ –Ω–æ–≤–æ–º –æ–∫–Ω–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF.';
        }
        
        if (lowerMessage.includes('—Å–∫–∞—á–∞—Ç—å')) {
            return '–î–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∫–Ω–∏–≥–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–°–∫–∞—á–∞—Ç—å" –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–µ –∫–Ω–∏–≥–∏. –ö–Ω–∏–≥–∞ –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF.';
        }
        
        if (lowerMessage.includes('—Å–ø–∞—Å–∏–±–æ')) {
            return '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞! –ï—Å–ª–∏ —É –≤–∞—Å –ø–æ—è–≤—è—Ç—Å—è –µ—â–µ –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å.';
        }
        
        if (lowerMessage.includes('–ø–æ–º–æ—â—å') || lowerMessage.includes('–ø–æ–º–æ–≥–∏')) {
            return '–Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å –ø–æ–∏—Å–∫–æ–º –∫–Ω–∏–≥, –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ–º –∞—É–¥–∏–æ–∫–Ω–∏–≥, —á—Ç–µ–Ω–∏–µ–º –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ–º. –ü—Ä–æ—Å—Ç–æ —Å–ø—Ä–æ—Å–∏—Ç–µ –æ —Ç–æ–º, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç!';
        }
        
        return '–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª –≤–∞—à –≤–æ–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –±—ã—Å—Ç—Ä—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∏–∂–µ.';
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    sendBtn.addEventListener('click', () => sendMessage());
    chatInput.addEventListener('keypress', (e) => {
        if (e.key === 'Enter') {
            sendMessage();
        }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –±—ã—Å—Ç—Ä—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    quickReplies.addEventListener('click', (e) => {
        if (e.target.classList.contains('quick-reply-btn')) {
            sendMessage(e.target.textContent);
        }
    });

    // –ê–≤—Ç–æ—Ñ–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ —á–∞—Ç
    chatAssistant.addEventListener('click', () => {
        if (!chatAssistant.classList.contains('minimized')) {
            chatInput.focus();
        }
    });
});
